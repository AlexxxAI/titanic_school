import streamlit as st
import numpy as np
import joblib

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ scaler ===
model = joblib.load('titanic_model.pkl')
scaler = joblib.load('titanic_scaler.pkl')

# === –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ ===
st.set_page_config(page_title="üõ≥Ô∏è Titanic Survival Predictor", page_icon="üö¢")
st.title("üõ≥Ô∏è Titanic Survival Prediction")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –∏ —É–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–æ–≤ –µ–≥–æ —à–∞–Ω—Å –≤—ã–∂–∏—Ç—å!")

st.divider()

# === –í–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
col1, col2 = st.columns(2)

with col1:
    sex = st.selectbox("–ü–æ–ª", ["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"])
    pclass = st.selectbox("–ö–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", [1, 2, 3])
    age_group = st.selectbox("–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞", ["–†–µ–±—ë–Ω–æ–∫ (0-12)", "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫ (13-18)", "–í–∑—Ä–æ—Å–ª—ã–π (19-55)", "–ü–æ–∂–∏–ª–æ–π (55+)"])

with col2:
    fare = st.number_input("–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞ ($)", min_value=0.0, value=30.0, step=1.0)
    embarked = st.selectbox("–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏", ["Southampton", "Cherbourg", "Queenstown"])
    family_size = st.slider("–†–∞–∑–º–µ—Ä —Å–µ–º—å–∏ (–≤–∫–ª—é—á–∞—è —Å–µ–±—è)", 1, 10, 1)

# === –ü—Ä–∏–∑–Ω–∞–∫–∏ ===
is_alone = 1 if family_size == 1 else 0
sex = 1 if sex == "–ñ–µ–Ω—â–∏–Ω—ã" else 0
embarked = {"Southampton": 0, "Cherbourg": 1, "Queenstown": 2}[embarked]
age_group = {"–†–µ–±—ë–Ω–æ–∫ (0-12)": 0, "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫ (13-18)": 1, "–í–∑—Ä–æ—Å–ª—ã–π (19-55)": 2, "–ü–æ–∂–∏–ª–æ–π (55+)": 3}[age_group]

features = np.array([[sex, pclass, fare, embarked, family_size, is_alone, age_group]])
features_scaled = scaler.transform(features)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
if st.button("üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏–µ"):
    proba = model.predict_proba(features_scaled)[0][1]  # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏—è
    percentage = round(proba * 100, 2)

    st.markdown("### üßæ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∂–∏–≤–∞–Ω–∏—è:")
    st.progress(proba, text=f"{percentage}%")

    if proba > 0.8:
        st.success(f"üéâ –ü–∞—Å—Å–∞–∂–∏—Ä –ø–æ—á—Ç–∏ —Ç–æ—á–Ω–æ –≤—ã–∂–∏–≤–µ—Ç! ({percentage}%)")
    elif proba > 0.5:
        st.info(f"‚ö†Ô∏è –ü–∞—Å—Å–∞–∂–∏—Ä, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã–∂–∏–≤–µ—Ç. ({percentage}%)")
    else:
        st.error(f"üíÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —à–∞–Ω—Å –Ω–µ–≤–µ–ª–∏–∫. ({percentage}%)")

    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    with st.expander("üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
        st.write("**–í–≤–µ–¥—ë–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:**")
        st.json({
            "–ü–æ–ª": "–ñ–µ–Ω—â–∏–Ω–∞" if sex == 1 else "–ú—É–∂—á–∏–Ω–∞",
            "–ö–ª–∞—Å—Å": pclass,
            "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞": age_group,
            "–¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞": fare,
            "–ü–æ—Ä—Ç –ø–æ—Å–∞–¥–∫–∏": embarked,
            "–†–∞–∑–º–µ—Ä —Å–µ–º—å–∏": family_size,
            "–û–¥–∏–Ω –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞–ª": bool(is_alone)
        })
